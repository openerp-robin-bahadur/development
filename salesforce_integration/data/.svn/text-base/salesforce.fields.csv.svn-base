id,table_id/id,field_id/id,salesforce_name,type,evaluation_type,in_function,out_function
salesforce_integration.crm_lead_LastReferencedDate,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_LastReferencedDate,LastReferencedDate,Import only,Direct Mapping,,
salesforce_integration.crm_lead_name,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_name,Name,Import only,Direct Mapping,,
salesforce_integration.crm_lead_contact_name,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_contact_name,FirstName,Two way,Direct Mapping,,
salesforce_integration.crm_lead_fax,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_fax,Fax,Two way,Direct Mapping,,
salesforce_integration.crm_lead_partner_name,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_partner_name,Company,Two way,Function,"result=[('partner_name',response.get('Company'))]","result=[('Company',record.partner_name or '/')]"
salesforce_integration.crm_lead_country_id,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_country_id,Country,Two way,Function,"result=[('sf_country',response.get('Country'))]
if response.get('Country',False):
    cr.execute('SELECT id from res_country where lower(name)=lower(%s)',(response['Country'],))
    country_id=cr.dictfetchall()
    if country_id:
        result.append(('country_id',country_id[0]['id']))","if record.country_id:
    result=[('Country',record.country_id.name)]
else:
    result=[('Country',record.sf_country)]"
salesforce_integration.crm_lead_active,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_active,IsDeleted,Import only,Function,"result=[('active',True)]
if response.get('IsDeleted'):
    result=[('active',False)]",
salesforce_integration.crm_lead_phone,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_phone,Phone,Two way,Direct Mapping,,
salesforce_integration.crm_lead_function,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_Industry,Industry,Two way,Direct Mapping,,
salesforce_integration.crm_lead_zip,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_zip,PostalCode,Two way,Direct Mapping,,
salesforce_integration.crm_lead_mobile,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_mobile,MobilePhone,Two way,Direct Mapping,,
salesforce_integration.crm_lead_city,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_city,City,Two way,Direct Mapping,,
salesforce_integration.crm_lead_email_from,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_email_from,Email,Two way,Direct Mapping,,
salesforce_integration.crm_lead_description,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_description,Description,Two way,Direct Mapping,,
salesforce_integration.crm_lead_street,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_street,Street,Two way,Direct Mapping,,
salesforce_integration.crm_lead_Website,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_website,Website,Two way,Direct Mapping,,
salesforce_integration.crm_lead_AnnualRevenue,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_AnnualRevenue,AnnualRevenue,Two way,Direct Mapping,,
salesforce_integration.crm_lead_Rating,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_priority,Rating,Import only,Function,"map_rating={'Hot':'1','Warm':'3','Cold':'4'} 
result=[('priority',map_rating.get(response.get('Rating')))]","map_rating={1:'Hot',2:'Hot',3:'Warm',4:'Cold',5:'Cold'} 
result=[('Rating',map_rating.get(record.priority))]"
salesforce_integration.crm_lead_Salutation,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_title,Salutation,Two way,Function,"result=None
title_ids=self.pool.get('res.partner.title').search(cr,uid,['|',('name','=',response.get('Salutation')),('shortcut','=',response.get('Salutation'))]) 
if title_ids:
    result=[('title',title_ids[0])]","result=[('Salutation',record.title and record.title.shortcut or None)]"
salesforce_integration.crm_lead_Status,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_Status,Status,Two way,Function,"result=[('Status',response.get('Status'))] 
map_dict={'Open - Not Contacted':'draft','Working - Contacted':'open','Closed - Not Converted':'cancel','Closed - Converted':'done'} 
stage_ids=self.pool.get('crm.case.stage').search(cr,uid,[('state','=',map_dict.get(response.get('Status'))),('type','in',('both','lead'))])
if stage_ids:
    result.append(('stage_id',stage_ids[0]))","map_dict={'draft':'Open - Not Contacted','open':'Working - Contacted','cancel':'Closed - Not Converted','done':'Closed - Converted'}    
stage=map_dict.get(record.stage_id.state)
if stage:
    result=[('Status',stage)]"
salesforce_integration.crm_lead_ConvertedOpportunityId,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_ConvertedOpportunityId,ConvertedOpportunityId,Import only,Direct Mapping,,
salesforce_integration.crm_lead_ConvertedContactId,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_ConvertedContactId,ConvertedContactId,Import only,Direct Mapping,,
salesforce_integration.crm_lead_ConvertedAccountId,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_ConvertedAccountId,ConvertedAccountId,Import only,Direct Mapping,,
salesforce_integration.crm_lead_contact_name_last,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_contact_name_last,LastName,Two way,Function,"result=[('contact_name_last',response.get('LastName'))]","result=[('LastName',record.contact_name_last or '/')]"
salesforce_integration.crm_lead_LeadSource,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_LeadSource,LeadSource,Two way,Direct Mapping,,
salesforce_integration.crm_lead_state_id,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_state_id,State,Two way,Function,"result=[('sf_state',response.get('State'))]
if response.get('State'):
    cr.execute('SELECT id from res_country_state where lower(name)=lower(%s)',(response['State'],))
    state_id=cr.dictfetchall()
    if state_id:
        result.append(('state_id',state_id[0]['id']))","if record.state_id:
    result=[('State',record.state_id.name)]
else:
    result=[('State',record.sf_state)]"
salesforce_integration.crm_lead_NumberOfEmployees,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_NumberOfEmployees,NumberOfEmployees,Two way,Direct Mapping,,
salesforce_integration.crm_lead_LastActivityDate,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_LastActivityDate,LastActivityDate,Import only,Direct Mapping,,
salesforce_integration.crm_lead_ConvertedDate,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_ConvertedDate,ConvertedDate,Import only,Direct Mapping,,
salesforce_integration.crm_lead_referred,salesforce_integration.salesforce_crm_lead,crm.field_crm_lead_referred,PartnerAccountId,Two way,Function,"if response.get('PartnerAccountId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('PartnerAccountId'))
    if erp_id:
        brwse_partner=self.pool.get('res.partner').browse(cr,uid,erp_id)
        result=[('partner_id',erp_id),('referred',brwse_partner and brwse_partner.name or response.get('PartnerAccountId'))]","if record.partner_id:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.partner_id.id)
    if sf_id:
        result=[('PartnerAccountId',sf_id)]"
salesforce_integration.crm_lead_sf_Title,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_Title,Title,Two way,Direct Mapping,,
salesforce_integration.crm_lead_sf_CurrentGenerators__c,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_CurrentGenerators__c,CurrentGenerators__c,Two way,Direct Mapping,,
salesforce_integration.crm_lead_sf_NumberofLocations__c,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_NumberofLocations__c,NumberofLocations__c,Two way,Direct Mapping,,
salesforce_integration.crm_lead_sf_Primary__c,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_Primary__c,Primary__c,Two way,Direct Mapping,,
salesforce_integration.crm_lead_sf_SICCode__c,salesforce_integration.salesforce_crm_lead,salesforce_integration.field_crm_lead_SICCode__c,SICCode__c,Two way,Direct Mapping,,
salesforce_integration.product_name,salesforce_integration.salesforce_product,product.field_product_template_name,Name,Two way,Direct Mapping,,
salesforce_integration.product_active,salesforce_integration.salesforce_product,product.field_product_product_active,IsActive,Two way,Direct Mapping,,
salesforce_integration.product_default_code,salesforce_integration.salesforce_product,product.field_product_product_default_code,ProductCode,Two way,Direct Mapping,,
salesforce_integration.product_description,salesforce_integration.salesforce_product,product.field_product_template_description,Description,Two way,Direct Mapping,,
salesforce_integration.product_IsDeleted,salesforce_integration.salesforce_product,salesforce_integration.field_product_product_IsDeleted,IsDeleted,Import only,Direct Mapping,,
salesforce_integration.product_LastModifiedDate,salesforce_integration.salesforce_product,salesforce_integration.field_product_product_LastModifiedDate,LastModifiedDate,Import only,Direct Mapping,,
salesforce_integration.product_CreatedDate,salesforce_integration.salesforce_product,salesforce_integration.field_product_product_CreatedDate,CreatedDate,Import only,Direct Mapping,,
salesforce_integration.product_SystemModstamp,salesforce_integration.salesforce_product,salesforce_integration.field_product_product_SystemModstamp,SystemModstamp,Import only,Direct Mapping,,
salesforce_integration.partner_country_id,salesforce_integration.salesforce_partner,base.field_res_partner_country_id,BillingCountry,Two way,Function,"result=[('sf_country',response.get('BillingCountry'))]
if response.get('BillingCountry',False):
    cr.execute('SELECT id from res_country where lower(name)=lower(%s)',(response['BillingCountry'],))
    country_id=cr.dictfetchall()
    if country_id:
        result.append(('country_id',country_id[0]['id']))","if record.country_id:
    result=[('BillingCountry',record.country_id.name)]
else:
    result=[('BillingCountry',record.sf_country)]"
salesforce_integration.partner_active,salesforce_integration.salesforce_partner,base.field_res_partner_active,IsDeleted,Two way,Function,"result=[('active',True)]
if response.get('Active__c') =='No' or response.get('IsDeleted'):
    result=[('active',False)]","result=[('Active__c','Yes')]
if not record.active:
    result=[('Active__c','No')]"
salesforce_integration.partner_state_id,salesforce_integration.salesforce_partner,base.field_res_partner_state_id,BillingState,Two way,Function,"result=[('sf_state',response.get('BillingState'))]
if response.get('BillingState'):
    cr.execute('SELECT id from res_country_state where lower(name)=lower(%s)',(response['BillingState'],))
    state_id=cr.dictfetchall()
    if state_id:
        result.append(('state_id',state_id[0]['id']))","if record.state_id:
    result=[('BillingState',record.state_id.name)]
else:
    result=[('BillingState',record.sf_state)]"
salesforce_integration.partner_Rating,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_Rating,Rating,Two way,Direct Mapping,,
salesforce_integration.partner_Site,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_Site,Site,Two way,Direct Mapping,,
salesforce_integration.partner_LastActivityDate,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_LastActivityDate,LastActivityDate,Import only,Direct Mapping,,
salesforce_integration.partner_SicDesc,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_SicDesc,SicDesc,Two way,Direct Mapping,,
salesforce_integration.partner_Partner_Type,salesforce_integration.salesforce_partner,bista_product_attribute.field_res_partner_cust_type,Type,Two way,Direct Mapping,,
salesforce_integration.partner_parent_id,salesforce_integration.salesforce_partner,base.field_res_partner_parent_id,ParentId,Two way,Function,"if response.get('ParentId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('ParentId'))
    if erp_id:
        result=[('parent_id',erp_id)]","if record.parent_id:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.parent_id.id)
    if sf_id:
        result=[('ParentId',sf_id)]"
salesforce_integration.partner_name,salesforce_integration.salesforce_partner,base.field_res_partner_name,Name,Two way,Function,"result=[('is_company',True),('name',response.get('Name') or '/')]","result=[('Name',record.name)]"
salesforce_integration.partner_AccountNumber,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_AccountNumber,AccountNumber,Two way,Direct Mapping,,
salesforce_integration.partner_zip,salesforce_integration.salesforce_partner,base.field_res_partner_zip,BillingPostalCode,Two way,Direct Mapping,,
salesforce_integration.partner_street,salesforce_integration.salesforce_partner,base.field_res_partner_street,BillingStreet,Two way,Direct Mapping,,
salesforce_integration.partner_comment,salesforce_integration.salesforce_partner,base.field_res_partner_comment,Description,Two way,Direct Mapping,,
salesforce_integration.partner_fax,salesforce_integration.salesforce_partner,base.field_res_partner_fax,Fax,Two way,Direct Mapping,,
salesforce_integration.partner_phone,salesforce_integration.salesforce_partner,base.field_res_partner_phone,Phone,Two way,Direct Mapping,,
salesforce_integration.partner_website,salesforce_integration.salesforce_partner,base.field_res_partner_website,Website,Two way,Direct Mapping,,
salesforce_integration.partner_NumberOfEmployees,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_NumberOfEmployees,NumberOfEmployees,Two way,Direct Mapping,,
salesforce_integration.partner_TickerSymbol,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_TickerSymbol,TickerSymbol,Two way,Direct Mapping,,
salesforce_integration.partner_AccountSource,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_AccountSource,AccountSource,Two way,Direct Mapping,,
salesforce_integration.partner_city,salesforce_integration.salesforce_partner,base.field_res_partner_city,BillingCity,Two way,Direct Mapping,,
salesforce_integration.partner_AnnualRevenue,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_AnnualRevenue,AnnualRevenue,Two way,Direct Mapping,,
salesforce_integration.partner_Ownership,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_Ownership,Ownership,Two way,Direct Mapping,,
salesforce_integration.partner_Sic,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_Sic,Sic,Two way,Direct Mapping,,
salesforce_integration.partner_CustomerPriority,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_CustomerPriority__c,CustomerPriority__c,Two way,Direct Mapping,,
salesforce_integration.partner_SLA,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_SLA__c,SLA__c,Two way,Direct Mapping,,
salesforce_integration.partner_SLAExpirationDate,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_SLAExpirationDate__c,SLAExpirationDate__c,Two way,Direct Mapping,,
salesforce_integration.partner_SLASerialNumber,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_SLASerialNumber__c,SLASerialNumber__c,Two way,Direct Mapping,,
salesforce_integration.partner_NumberofLocations,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_NumberofLocations__c,NumberofLocations__c,Two way,Direct Mapping,,
salesforce_integration.partner_UpsellOpportunity,salesforce_integration.salesforce_partner,salesforce_integration.field_res_partner_UpsellOpportunity__c,UpsellOpportunity__c,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_name,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_name,FirstName,Two way,Function,"result=[('name',response.get('FirstName') or '/')]","result=[('FirstName',record.name)]"
salesforce_integration.partner_contacts_last_name,salesforce_integration.salesforce_partner_contacts,bista_product_attribute.field_res_partner_last_name,LastName,Two way,Function,"result=[('last_name',response.get('LastName'))]","result=[('LastName',record.last_name or '/')]"
salesforce_integration.partner_contacts_state_id,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_state_id,MailingState,Two way,Function,"result=[('sf_state',response.get('MailingState'))]
if response.get('MailingState'):
    cr.execute('SELECT id from res_country_state where lower(name)=lower(%s)',(response['MailingState'],))
    state_id=cr.dictfetchall()
    if state_id:
        result.append(('state_id',state_id[0]['id']))","if record.state_id:
    result=[('MailingState',record.state_id.name)]
else:
    result=[('MailingState',record.sf_state)]"
salesforce_integration.partner_contacts_fax,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_fax,Fax,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_phone,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_phone,Phone,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_active,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_active,IsDeleted ,Import only,Function,"result=[('active',True)]
if response.get('IsDeleted'):
    result=[('active',False)]",
salesforce_integration.partner_contacts_parent_id,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_parent_id,AccountId,Two way,Function,"if response.get('AccountId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('AccountId'))
    if erp_id:
        result=[('parent_id',erp_id)]","if record.parent_id:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.parent_id.id)
    if sf_id:
        result=[('AccountId',sf_id)]"
salesforce_integration.partner_contacts_street,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_street,MailingStreet,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_birthdate,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_birthdate,Birthdate,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_mobile,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_mobile,MobilePhone,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_comment,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_comment,Description,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_email,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_email,Email,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_city,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_city,MailingCity,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_country_id,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_country_id,MailingCountry,Two way,Function,"result=[('sf_country',response.get('MailingCountry'))]
if response.get('MailingCountry',False):
    cr.execute('SELECT id from res_country where lower(name)=lower(%s)',(response['MailingCountry'],))
    country_id=cr.dictfetchall()
    if country_id:
        result.append(('country_id',country_id[0]['id']))","if record.country_id:
    result=[('MailingCountry',record.country_id.name)]
else:
    result=[('MailingCountry',record.sf_country)]"
salesforce_integration.partner_contacts_title,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_title,Salutation,Two way,Function,"result=None
title_ids=self.pool.get('res.partner.title').search(cr,uid,['|',('name','=',response.get('Salutation')),('shortcut','=',response.get('Salutation'))])
if title_ids:
    result=[('title',title_ids[0])]","result=[('Salutation',record.title and record.title.shortcut or None)]"
salesforce_integration.partner_contacts_zip,salesforce_integration.salesforce_partner_contacts,base.field_res_partner_zip,MailingPostalCode,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_LastActivityDate,salesforce_integration.salesforce_partner_contacts,salesforce_integration.field_res_partner_LastActivityDate,LastActivityDate,Import only,Direct Mapping,,
salesforce_integration.partner_contacts_ReportsToId,salesforce_integration.salesforce_partner_contacts,salesforce_integration.field_res_partner_ReportsToId,ReportsToId,Two way,Function,"if response.get('ReportsToId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('ReportsToId'))
    if erp_id:
        result=[('ReportsToId',erp_id)]","if record.ReportsToId:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.ReportsToId.id)
    if sf_id:
        result=[('ReportsToId',sf_id)]"
salesforce_integration.partner_contacts_Department,salesforce_integration.salesforce_partner_contacts,salesforce_integration.field_res_partner_Department,Department,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_Title,salesforce_integration.salesforce_partner_contacts,salesforce_integration.field_res_partner_Title,Title,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_Language,salesforce_integration.salesforce_partner_contacts,salesforce_integration.field_res_partner_Languages__c,Languages__c,Two way,Direct Mapping,,
salesforce_integration.partner_contacts_Level,salesforce_integration.salesforce_partner_contacts,salesforce_integration.field_res_partner_Level__c,Level__c,Two way,Direct Mapping,,
,,,,,,,
salesforce_integration.crm_claim_name,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_name,Subject,Two way,Function,"result=[('name',response.get('Subject') or ' '),('user_id',uid)]","result=[('Subject',record.name)]"
salesforce_integration.crm_claim_active,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_active,IsDeleted,Import only,Function,"result=[('active',True)]
if response.get('IsDeleted'):
    result=[('active',False)]",
salesforce_integration.crm_claim_stage_id,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_stage_id,Status,Two way,Function,"erp_state='draft'
if response.get('Status') and response.get('Status')=='Closed':
    erp_state='done'
erp_stage_ids=self.pool.get('crm.claim.stage').search(cr,uid,[('state','=',erp_state)])
result=[('stage_id',erp_stage_ids and erp_stage_ids[0])]","sf_state='New'
if record.state=='done':
    sf_state='Closed'
result=[('Status',sf_state)]"
salesforce_integration.crm_claim_date_closed,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_date_closed,ClosedDate,Import only,Direct Mapping,,
salesforce_integration.crm_claim_priority,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_priority,Priority,Two way,Function,"map_rating={'High':'2','Medium':'3','Low':'4'}
result=[('priority',map_rating.get(response.get('Priority')))]","map_rating={'1':'High','2':'High','3':'Medium','4':'Low','5':'Low'}
result=[('Priority',map_rating.get(record.priority))]"
salesforce_integration.crm_claim_partner_phone,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_partner_phone,SuppliedPhone,Two way,Direct Mapping,,
salesforce_integration.crm_claim_email_from,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_email_from,SuppliedEmail,Two way,Direct Mapping,,
salesforce_integration.crm_claim_description,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_description,Description,Two way,Direct Mapping,,
salesforce_integration.crm_claim_partner_id,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_partner_id,AccountId,Two way,Function,"if response.get('AccountId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('AccountId'))
    if erp_id:
        result=[('partner_id',erp_id)]","if record.partner_id:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.partner_id.id)
    if sf_id:
        result=[('AccountId',sf_id)]"
salesforce_integration.crm_claim_CaseNumber,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_CaseNumber,CaseNumber,Import only,Direct Mapping,,
salesforce_integration.crm_claim_Reason,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_Reason,Reason,Two way,Direct Mapping,,
salesforce_integration.crm_claim_Type,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_Type,Type,Two way,Direct Mapping,,
salesforce_integration.crm_claim_SuppliedCompany,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_SuppliedCompany,SuppliedCompany,Two way,Direct Mapping,,
salesforce_integration.crm_claim_SuppliedName,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_SuppliedName,SuppliedName,Two way,Direct Mapping,,
salesforce_integration.crm_claim_Origin,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_Origin,Origin,Two way,Direct Mapping,,
salesforce_integration.crm_claim_PotentialLiability__c,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_PotentialLiability__c,PotentialLiability__c,Two way,Direct Mapping,,
salesforce_integration.crm_claim_SLAViolation__c,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_SLAViolation__c,SLAViolation__c,Two way,Direct Mapping,,
salesforce_integration.crm_claim_AssetId,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_AssetId,AssetId,Two way,Direct Mapping,,
salesforce_integration.crm_claim_EngineeringReqNumber__c,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_EngineeringReqNumber__c,EngineeringReqNumber__c,Two way,Direct Mapping,,
salesforce_integration.crm_claim_ParentId,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_ParentId,ParentId,Two way,Direct Mapping,,
salesforce_integration.crm_claim_Product_code,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_Product_code,Product__c,Two way,Direct Mapping,,
salesforce_integration.crm_claim_IsEscalated,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_IsEscalated,IsEscalated,Import only,Function,"escalate=False
if response.get('IsEscalated'):
    escalate=True
result=[('IsEscalated',escalate)]",
salesforce_integration.crm_claim_IsClosed,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_IsClosed,IsClosed,Import only,Function,"closed=False
if response.get('IsClosed'):
    closed=True
result=[('IsClosed',closed)]",
salesforce_integration.crm_claim_sf_contact_id,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_sf_contact_id,ContactId,Two way,Function,"if response.get('ContactId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('ContactId'))
    if erp_id:
        result=[('sf_contact_id',erp_id)]","if record.sf_contact_id:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.sf_contact_id.id)
    if sf_id:
        result=[('ContactId',sf_id)]"
salesforce_integration.crm_claim_date,salesforce_integration.salesforce_crm_claim,crm_claim.field_crm_claim_date,CreatedDate,Import only,Direct Mapping,,
salesforce_integration.crm_claim_LastModifiedDate,salesforce_integration.salesforce_crm_claim,salesforce_integration.field_crm_claim_LastModifiedDate,LastModifiedDate,Import only,Direct Mapping,,
salesforce_integration.crm_opportunity_planned_revenue,salesforce_integration.salesforce_crm_opportunity,crm.field_crm_lead_planned_revenue,Amount,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_name,salesforce_integration.salesforce_crm_opportunity,crm.field_crm_lead_name,Name,Two way,Function,"result=[('name',response.get('Name')),('type','opportunity')]","result=[('Name',record.name)]"
salesforce_integration.crm_opportunity_date_deadline,salesforce_integration.salesforce_crm_opportunity,crm.field_crm_lead_date_deadline,CloseDate,Two way,Function,"result=[('date_deadline',response.get('CloseDate'))]","from datetime import datetime
result=[('CloseDate',record.date_deadline or datetime.strftime(datetime.now(),'%Y-%m-%d'))]"
salesforce_integration.crm_opportunity_report_probability,salesforce_integration.salesforce_crm_opportunity,crm.field_crm_lead_report_probability,Probability,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_action_next,salesforce_integration.salesforce_crm_opportunity,crm.field_crm_lead_date_action_next,NextStep,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_active,salesforce_integration.salesforce_crm_opportunity,crm.field_crm_lead_active,IsDeleted,Import only,Function,"result=[('active',True)]
if response.get('IsDeleted'):
    result=[('active',False)]",
salesforce_integration.crm_opportunity_description,salesforce_integration.salesforce_crm_opportunity,crm.field_crm_lead_description,Description,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_partner_id,salesforce_integration.salesforce_crm_opportunity,crm.field_crm_lead_partner_id,AccountId,Two way,Function,"if response.get('AccountId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('AccountId'))
    if erp_id:
        result=[('partner_id',erp_id)]","if record.partner_id:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.partner_id.id)
    if sf_id:
        result=[('AccountId',sf_id)]"
salesforce_integration.crm_opportunity_LastActivityDate,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_LastActivityDate,LastActivityDate,Import only,Direct Mapping,,
salesforce_integration.crm_opportunity_Type,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_Type,Type,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_StageName,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_StageName,StageName,Two way,Function,"result=[('StageName',response.get('StageName'))]
map_dict={'Prospecting':'draft','Qualification':'pending','Needs Analysis':'pending','Value Proposition':'pending','Id. Decision Makers':'pending','Proposal/Price Quote':'open','Perception Analysis':'open','Negotiation/Review':'open','Closed Lost':'cancel','Closed Won':'done'} 
stage_ids=self.pool.get('crm.case.stage').search(cr,uid,[('state','=',map_dict.get(response.get('StageName'))),('type','in',('both','opportunity'))])
if stage_ids:
    result.append(('stage_id',stage_ids[0]))","map_dict={'draft':'Prospecting','pending':'Needs Analysis','open':'Negotiation/Review','cancel':'Closed Lost','done':'Closed Won'}
stage=map_dict.get(record.stage_id.state)
if stage:
    result=[('StageName',stage)]"
salesforce_integration.crm_opportunity_MainCompetitors,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_MainCompetitors__c,MainCompetitors__c,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_CurrentGenerators,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_CurrentGenerators__c,CurrentGenerators__c,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_DeliveryInstallationStatus,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_DeliveryInstallationStatus__c,DeliveryInstallationStatus__c,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_TrackingNumber,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_TrackingNumber__c,TrackingNumber__c,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_OrderNumber,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_OrderNumber__c,OrderNumber__c,Two way,Direct Mapping,,
salesforce_integration.crm_opportunity_ForecastCategoryName,salesforce_integration.salesforce_crm_opportunity,salesforce_integration.field_crm_lead_ForecastCategoryName,ForecastCategoryName,Two way,Direct Mapping,,
salesforce_integration.contract_partner_id,salesforce_integration.salesforce_contracts,analytic.field_account_analytic_account_partner_id,AccountId,Two way,Function,"result=[('type','contract')]
if response.get('AccountId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('AccountId'))
    if erp_id:
        brwse_partner=self.pool.get('res.partner').browse(cr,uid,erp_id)
        result.append(('partner_id',erp_id))
        result.append(('name',brwse_partner and brwse_partner.name or response.get('AccountId')))
    else:
        result.append(('name',response.get('ContractNumber')))
else:
    result.append(('name',response.get('ContractNumber')))","if record.partner_id:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.partner_id.id)
    if sf_id:
        result=[('AccountId',sf_id)]"
salesforce_integration.contract_date_start,salesforce_integration.salesforce_contracts,analytic.field_account_analytic_account_date_start,StartDate,Two way,Function,"result=[('date_start',response.get('StartDate'))]","from datetime import datetime
result=[('StartDate',record.date_start or datetime.strftime(datetime.now(),'%Y-%m-%d'))]"
salesforce_integration.contract_description,salesforce_integration.salesforce_contracts,analytic.field_account_analytic_account_description,Description,Two way,Direct Mapping,,
salesforce_integration.contract_date,salesforce_integration.salesforce_contracts,analytic.field_account_analytic_account_date,EndDate,Two way,Function,"result=[('date',response.get('EndDate'))]","from dateutil import relativedelta,parser
from datetime import datetime
term=1
if record.date and  record.date_start:
    obj_time=relativedelta.relativedelta(parser.parse(record.date or datetime.now),parser.parse(record.date_start))
    term=obj_time.months
    if not term or term<0:
        term=1
    elif obj_time.days and obj_time.days>0 :
        term+=1
result=[('ContractTerm',term or 1)]"
salesforce_integration.contract_customer_id,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_sf_customer_id,CustomerSignedId,Two way,Function,"if response.get('CustomerSignedId'):
    erp_id=self.pool.get('res.partner').get_internal_reference(cr,uid,account.id,response.get('CustomerSignedId'))
    if erp_id:
        result=[('sf_customer_id',erp_id)]","if record.sf_customer_id:
    sf_id=self.pool.get('res.partner').get_salesforce_reference(cr,uid,account.id,record.sf_customer_id.id)
    if sf_id:
        result=[('CustomerSignedId',sf_id)]"
salesforce_integration.contract_customer_title,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_CustomerSignedTitle,CustomerSignedTitle,Two way,Direct Mapping,,
salesforce_integration.contract_customer_signed_date,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_CustomerSignedDate,CustomerSignedDate,Two way,Direct Mapping,,
salesforce_integration.contract_owner_expiration_notice,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_OwnerExpirationNotice,OwnerExpirationNotice,Two way,Direct Mapping,,
salesforce_integration.contract_company_signed_date,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_CompanySignedDate,CompanySignedDate,Two way,Direct Mapping,,
salesforce_integration.contract_special_terms,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_SpecialTerms,SpecialTerms,Two way,Direct Mapping,,
salesforce_integration.contract_street,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_BillingStreet,BillingStreet,Two way,Direct Mapping,,
salesforce_integration.contract_city,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_BillingCity,BillingCity,Two way,Direct Mapping,,
salesforce_integration.contract_zip,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_BillingPostalCode,BillingPostalCode,Two way,Direct Mapping,,
salesforce_integration.contract_state_id,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_state_id,BillingState,Two way,Function,"if response.get('BillingState'):
    cr.execute('SELECT id from res_country_state where lower(name)=lower(%s)',(response['BillingState'],))
    state_id=cr.dictfetchall()
    if state_id:
        result=[('state_id',state_id[0]['id'])]","if record.state_id:
    result=[('BillingState',record.state_id.name)]"
salesforce_integration.contract_country_id,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_country_id,BillingCountry,Two way,Function,"if response.get('BillingCountry'):
    cr.execute('SELECT id from res_country where lower(name)=lower(%s)',(response['BillingCountry'],))
    country_id=cr.dictfetchall()
    if country_id:
        result=[('country_id',country_id[0]['id'])]","if record.country_id:
        result=[('BillingCountry',record.country_id.name)]"
salesforce_integration.contract_status,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_sf_status,Status,Import only,Direct Mapping,,
salesforce_integration.contract_active,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_active,IsDeleted,Import only,Function,"result=[('active',True)]
if response.get('IsDeleted'):
    result=[('active',False)]",
salesforce_integration.contract_last_activity_date,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_LastActivityDate,LastActivityDate,Import only,Direct Mapping,,
salesforce_integration.contract_last_ContractNumber,salesforce_integration.salesforce_contracts,salesforce_integration.field_account_analytic_account_ContractNumber,ContractNumber,Import only,Direct Mapping,,
