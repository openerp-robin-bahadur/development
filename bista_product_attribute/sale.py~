from datetime import datetime, timedelta
from openerp.osv import fields, osv

from openerp.tools.translate import _
from lxml import etree

import logging
_logger = logging.getLogger(__name__)


class sale_order(osv.osv):
    _inherit = "sale.order"

    def add_product_order_line(self,cr,uid,ids,context=None):
            read_data={}
            vals={}
            sales_price=0
            sale_data=self.browse(cr,uid,ids[0])

            attr_name_in_product=[]
            attr_type_in_product=[]

    #        attr_name_type_dict = {}

            if sale_data.add_product_id.attribute_set_id:
                attribute_set_val=sale_data.add_product_id.attribute_set_id.attribute_group_ids
                for each in attribute_set_val:
                    for y in each.attribute_ids:
        #                attr_name_type_dict[str(y.attribute_type)] = str(y.name)
                        attr_name_in_product.append(y.name)
                        attr_type_in_product.append(y.attribute_type)





                read_data=self.pool.get('product.product').read(cr,uid,[sale_data.add_product_id.id],attr_name_in_product)
                read_data = read_data[0]




            print"read value got",read_data

            if sale_data.add_product_id:
                vals.update({'product_id':sale_data.add_product_id.id,
                'order_id':sale_data.id,
                'name':sale_data.add_product_id.name,
                'attribute_set_id':sale_data.add_product_id.attribute_set_id and sale_data.add_product_id.attribute_set_id.id or False,
                })

                for each in read_data:
                    if each in attr_name_in_product:
                        i = attr_name_in_product.index(each)

                        if attr_type_in_product[i] == 'select':
                            print "select type attribute"
                            print read_data[each]
                            if read_data[each]:
                                read_data[each] = read_data[each][0]
                                sales_price_select=self.pool.get('attribute.option').browse(cr,uid,read_data[each]).sales_price

                                sales_price += sales_price_select
                                print read_data[each]

                        elif attr_type_in_product[i] == 'multiselect':
                            print "multiselect type attribute"
                            print read_data[each]
                            if read_data[each]:
                                for each_attr_id in read_data[each]:
                                    sales_price_multi= self.pool.get('attribute.option').browse(cr,uid,each_attr_id).sales_price

                                    sales_price += sales_price_multi
                                read_data[each] = [(6,0,read_data[each])]

                                print [(6,0,read_data[each])]
                            else:
                                read_data[each] = [(6,0,[])]

                        else:
                            search_id=self.pool.get('attribute.attribute').search(cr,uid,[('model','=','product.product'),('name','=',each)])
                            sales_price_other= self.pool.get('attribute.attribute').browse(cr,uid,search_id[0]).option_ids[0].sales_price

                            sales_price += sales_price_other
                sales_price += self.pool.get('product.product').browse(cr,uid,sale_data.add_product_id.id).list_price
                vals.update(read_data)
#                vals.update({'price_unit':sales_price})

                print "===============vals=========",vals

                self.pool.get('sale.order.line').create(cr,uid,vals)
                self.write(cr,uid,ids,{'add_product_id':False})


            return True


    def add_template_order_line(self,cr,uid,ids,context=None):
        try:
            sales_price=0
            vals={}
            sale_data=self.browse(cr,uid,ids[0])
            attr_name_in_product=[]
            attr_type_in_product=[]

    #        attr_name_type_dict = {}


            attribute_set_val=sale_data.add_product_temp_id.attribute_id.attribute_group_ids
            for each in attribute_set_val:
                for y in each.attribute_ids:
    #
                    attr_name_in_product.append(y.name)
                    attr_type_in_product.append(y.attribute_type)
    #


            read_data=self.pool.get('base.product.template').read(cr,uid,[sale_data.add_product_temp_id.id],attr_name_in_product)
            read_data = read_data[0]



            print"read value got===",read_data
    #        print attribute_vals

            if sale_data.add_product_temp_id:
                vals.update({'product_id':sale_data.add_product_temp_id.product_id.id,
                'order_id':sale_data.id,
                'name':sale_data.add_product_temp_id.name,
                'attribute_set_id':sale_data.add_product_temp_id.attribute_id and sale_data.add_product_temp_id.attribute_id.id or False,
    #
                })

                for each in read_data:
                    if each in attr_name_in_product:
                        i = attr_name_in_product.index(each)
                        if attr_type_in_product[i] == 'select':
                            print "select type attribute"
                            print read_data[each]
                            if read_data[each]:
                                read_data[each] = read_data[each][0]
                                sales_price_select=self.pool.get('attribute.option').browse(cr,uid,read_data[each]).sales_price

                                sales_price += sales_price_select
                                print"sales_price"

                                print read_data[each]
                            else:
                                pass

                        elif attr_type_in_product[i] == 'multiselect':
                            if read_data[each]:

                                print read_data[each]

                                for each_attr_id in read_data[each]:
                                    sales_price_multi= self.pool.get('attribute.option').browse(cr,uid,each_attr_id).sales_price

                                    sales_price += sales_price_multi

                                read_data[each] = [(6,0,read_data[each])]
                                print [(6,0,read_data[each])]
                            else:
                                read_data[each] = [(6,0,[])]

                        else:
                            search_id=self.pool.get('attribute.attribute').search(cr,uid,[('model','=','base.product.template'),('name','=',each)])
                            sales_price_other= self.pool.get('attribute.attribute').browse(cr,uid,search_id[0]).option_ids[0].sales_price

                            sales_price += sales_price_other

                sales_price += self.pool.get('product.product').browse(cr,uid,sale_data.add_product_temp_id.product_id.id).list_price
                vals.update(read_data)
                vals.update({'price_unit':sales_price})


                print "Final Product Vals for template : " ,vals
                vals.pop('id')
                print"vals after id ",vals
                sol_id = self.pool.get('sale.order.line').create(cr,uid,vals)

                print"gor id for line",sol_id

#                sale_order_line_data = self.pool.get('sale.order.line').read(cr, uid, sol_id,[])

    #            print "sale_order_line_data ",sale_order_line_data

                self.write(cr,uid,ids,{'add_product_temp_id':False})


            return True
        except:
            pass

    def add_bundle_order_line(self,cr,uid,ids,context=None):

        try:
            sales_price=0
            vals={}
            sale_data=self.browse(cr,uid,ids[0])

            print sale_data.add_product_bundle_id.template_id

            for each_template in sale_data.add_product_bundle_id.template_id:

                attr_name_in_product=[]
                attr_type_in_product=[]

                print"template_id",each_template
                attribute_set_val=each_template.attribute_id.attribute_group_ids
                print "attribute_group_ids",attribute_set_val
                for each in attribute_set_val:
                    for y in each.attribute_ids:
        #
                        attr_name_in_product.append(y.name)
                        attr_type_in_product.append(y.attribute_type)
    #

                print "attr_name_in_product",attr_name_in_product
                print "attr_type_in_product",attr_type_in_product


                read_data=self.pool.get('base.product.template').read(cr,uid,[each_template.id],attr_name_in_product)
                read_data = read_data[0]
                print"read data value:",read_data



                template_ids_val=sale_data.add_product_bundle_id.template_id
                print"total template ids got",template_ids_val


                if sale_data.add_product_bundle_id:
                        for each in template_ids_val:
                            print"each ka value",each
                            vals.update({'product_id':each.product_id.id,
                            'order_id':sale_data.id,
                            'name':each.name,
                            'attribute_set_id':each.attribute_id and each.attribute_id.id or False

                            })
                            print"vals value second time",vals
                            for each1 in read_data:
                                print"second time read time",each1
                                if each1 in attr_name_in_product:
                                    i = attr_name_in_product.index(each1)
                                    if attr_type_in_product[i] == 'select':

                                        print read_data[each1]
                                        if read_data[each1]:
                                            read_data[each1] = read_data[each1][0]
                                            sales_price_select=self.pool.get('attribute.option').browse(cr,uid,read_data[each1]).sales_price

                                            sales_price += sales_price_select
                                            print read_data[each1]
                                        else:
                                            pass

                                    elif attr_type_in_product[i] == 'multiselect':

                                        print read_data[each1]
                                        if read_data[each1]:
                                            for each_attr_id in read_data[each1]:
                                                sales_price_multi= self.pool.get('attribute.option').browse(cr,uid,each_attr_id).sales_price

                                                sales_price += sales_price_multi
                                            read_data[each1] = [(6,0,read_data[each1])]
                                            print [(6,0,read_data[each1])]
                                        else:
                                            read_data[each1] = False


                                    else:
                                        search_id=self.pool.get('attribute.attribute').search(cr,uid,[('model','=','product.product'),('name','=',each1)])

                                        sales_price_other= self.pool.get('attribute.attribute').browse(cr,uid,search_id[0]).option_ids[0].sales_price

                                        sales_price += sales_price_other
    #                            for list_price_val in template_ids_val:
    #                                sales_price += self.pool.get('product.product').browse(cr,uid,list_price_val.product_id.id).list_price
    #                                vals.update(read_data)
    #                                vals.update({'price_unit':sales_price})
                            print "Final Product Vals : " ,vals
                            sol_id=self.pool.get('sale.order.line').create(cr,uid,vals)

                            print" check karo sol kitne bhi bar",sol_id
                            self.write(cr,uid,ids,{'add_product_bundle_id':False})


        

        except:
            pass


#    def _get_default_manger_id(self,cr,uid,context=None):
#
#            admin_id_def=self.pool.get('res.users').search(cr,uid,[('name','=','Administrator')])
#            return admin_id_def and admin_id_def[0] or False
#
#    def _get_default_company_id(self,cr,uid,context=None):
#
#            company_id_def=self.pool.get('res.partner').search(cr,uid,[('x_is_billing_vendor','=',True)])
#            return company_id_def and company_id_def[0] or False
#
#
#    def _get_default_contact_id(self,cr,uid,context=None):
#
#            contact_id_def=self.pool.get('res.partner').search(cr,uid,[('x_is_billing_vendor','=',True)])
#            return contact_id_def and contact_id_def[0] or False



    def onchange_manufacture_id(self, cr, uid, ids, x_manufacturer, context=None):
       v = {}

       v['x_franchise']=False

       return {'value': v}


    def onchange_guarantee_type_id(self, cr, uid, ids, x_guarantee_type_id, context=None):
       v = {}

       print "ids value",ids
       if x_guarantee_type_id:
           verbiage_info= self.pool.get('guarantee.type').browse(cr,uid,x_guarantee_type_id).verbiage
           if verbiage_info:
                   v['x_guarantee_verbiage'] = verbiage_info
       return {'value': v}

    def onchange_company_id(self, cr, uid, ids,x_signing_company_id , context=None):
       v = {}
       v['x_signing_contact_id']=False
       return {'value': v}

    def onchange_partner_id(self, cr, uid, ids, part, context=None):
        
        res =super(sale_order,self).onchange_partner_id(cr,uid,ids,part,context)
        if part:
            print"res value ",res

            if self.pool.get('res.partner').browse(cr,uid,part).is_company:
                res['value'].update({'x_signing_company_id':part})
#            warn_msg = _('Customer is not a Company')
#            warning = {
#                       'title': _('Alert!'),
#                       'message' : warn_msg
#
#                    }
#            res.update({'warning':warning})
            else:

                res['value'].update({'x_signing_company_id':False})
        return res









    _columns = {
#        'product_temp_id':fields.many2one('product.template','Product Template'),
        'add_product_id':fields.many2one('product.product','Product',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'add_product_temp_id':fields.many2one('base.product.template','Product Template',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]},),
        'add_product_bundle_id':fields.many2one('base.product.bundle','Product Bundle',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]},),
        'x_billing_vendor_id':fields.many2one('res.partner','Billing Vendor',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]},),
        'x_manager_id':fields.many2one('res.users','Sales Manager',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]},),
        'x_cs_rep_id':fields.many2one('res.users','Client Service Rep',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]},),
        'x_billing_month':fields.selection([('jan','January'),('feb','February'),('mar','March'),('apr','April'),('may','May'),('june','June'),('july','July'),('aug','August'),('sep','September'),('oct','October'),('nov','November'),('dec','December')],'Billing Month',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_billing_year':fields.integer('Billing Year',size=4,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_coop':fields.many2one('coop.info','Coop',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_dealer_code':fields.char('Dealer Code',size=32,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_additional_code':fields.char('Additional Code',size=32,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_call_source':fields.boolean('Call Source',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_guarantee_type_id':fields.many2one('guarantee.type','Guarantee Type',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_guarantee_verbiage':fields.text('Guarantee Verbiage',size=1024,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_insurance_amount':fields.float('Insurance Amount',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_performance_based':fields.boolean('Performance Based',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_performance_tracking':fields.boolean('Performance Tracking',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_suppress_dms':fields.boolean('Suppress DMS',states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_signing_company_id':fields.many2one('res.partner','Signing Company',required=True,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_signing_contact_id':fields.many2one('res.partner','Signing Contact',required=True,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_special_notes':fields.text('Special Notes',size=64,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_manufacturer':fields.many2one('manufacture.info','Manufacturer',required=True,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_franchise':fields.many2one('franchise.info','Franchise',required=True,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_campaign_theme_id':fields.many2one('campaign.theme',"Campaign Theme",states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),
        'x_signed_flag':fields.boolean('Signed'),
        'x_payment_due_date':fields.date('Payment Date',required=True,states={'review': [('readonly', True)], 'waiting_approved_signature': [('readonly', True)]}),


    }

    _defaults={
#    'x_manager_id':_get_default_manger_id,
#    'x_signing_company_id':_get_default_company_id,
#
#    'x_billing_vendor_id':_get_default_contact_id,
    

   }



    def create(self, cr, uid, vals, context=None):


        current_year=datetime.now().year
        print"got current year",current_year
        if vals.get('x_billing_year')!=current_year:
            raise osv.except_osv(_('Error!'),
                _('Year in not valid'))


        res=super(sale_order, self).create(cr, uid, vals, context=context)
        return res

#    def write(self,cr,uid,ids,vals,context=None):
#        res = super(sale_order,self).write(cr,uid,ids,vals,context)
#        attr_name=[]
#        for each in self.browse(cr,uid,ids):
#            for line in each.order_line:
#                if line.attribute_set_id:
#                    for attribute_group in line.attribute_set_id.attribute_group_ids:
#                        for attribute in attribute_group.attribute_ids:
#                            print"<===============================>",attribute.name
#                            if attribute.required_on_views:
#                                attr_name.append(attribute.name)
#
#
#                            print"required wala field mil gaya== list me===>",attr_name
#                    for each_line in self.pool.get('sale.order.line').read(cr,uid,[line.id],attr_name):
#                        print"dictionary value",each
#                        for value in each_line:
#                            if not each_line.get(value):
#                                raise osv.except_osv(_('Error!'), _('Attribute \n %s')%(value+  ' is missing'))
#
#        return res

sale_order()



class sale_order_line(osv.osv):
    _inherit = "sale.order.line"


    def _attr_grp_ids(self, cr, uid, ids, field_names, arg=None, context=None):
        res = {}
        for i in ids:
            set_id = self.read(cr, uid, [i], fields=['attribute_set_id'],
                     context=context)[0]['attribute_set_id']
            if not set_id:
                res[i] = []
            else:
                res[i] = self.pool.get('attribute.group').search(cr, uid,
                      [('attribute_set_id', '=', set_id[0])])
        return res

    _columns = {
        'attribute_group_ids': fields.function(_attr_grp_ids, type='many2many',
        relation='attribute.group', string='Groups'),
        'attribute_set_id': fields.many2one('attribute.set', 'Attribute Set'),
        'price_per_unit':fields.float('List Price/Unit'),
        'price_per_line':fields.float('List Price/Line'),
        'product_uom_qty': fields.integer('Quantity', required=True, readonly=True, states={'draft': [('readonly', False)]}),

    }

    def open_attributes(self, cr, uid, ids, context=None):
        ir_model_data_obj = self.pool.get('ir.model.data')
        ir_model_data_id = ir_model_data_obj.search(cr, uid, [['model', '=', 'ir.ui.view'], ['name', '=', 'sale_attributes_form_view']], context=context)
        if ir_model_data_id:
            res_id = ir_model_data_obj.read(cr, uid, ir_model_data_id, fields=['res_id'])[0]['res_id']
        grp_ids = self._attr_grp_ids(cr, uid, [ids[0]], [], None, context)[ids[0]]
        ctx = {'open_attributes': True, 'attribute_group_ids': grp_ids}

        return {
            'name': 'Product Attributes',
            'view_type': 'form',
            'view_mode': 'form',
            'view_id': [res_id],
            'res_model': self._name,
            'context': ctx,
            'type': 'ir.actions.act_window',
            'nodestroy': True,
            'target': 'new',
            'res_id': ids and ids[0] or False,
        }

    def save_and_close_product_attributes(self, cr, uid, ids, context=None):
        return {'type': 'ir.actions.act_window_close'}

    def fields_view_get(self, cr, uid, view_id=None, view_type='form', context=None, toolbar=False, submenu=False):
        if context is None:
            context = {}

        def translate_view(source):
            """Return a translation of type view of source."""
            return translate(
                cr, None, 'view', context.get('lang'), source
            ) or source

        result = super(sale_order_line, self).fields_view_get(cr, uid, view_id,view_type,context,toolbar=toolbar, submenu=submenu)
        if view_type == 'form' and context.get('attribute_group_ids'):
            eview = etree.fromstring(result['arch'])
            #hide button under the name
            button = eview.xpath("//button[@name='open_attributes']")
            if button:
                button = button[0]
                button.getparent().remove(button)
            attributes_notebook, toupdate_fields = self.pool.get('attribute.attribute')._build_attributes_notebook(cr, uid, context['attribute_group_ids'], context=context)
            result['fields'].update(self.fields_get(cr, uid, toupdate_fields, context))
            if context.get('open_attributes'):
                placeholder = eview.xpath("//separator[@string='attributes_placeholder']")[0]
                placeholder.getparent().replace(placeholder, attributes_notebook)
            elif context.get('open_product_by_attribute_set'):
                main_page = etree.Element(
                    'page',
                    string=translate_view('Custom Attributes')
                )
                main_page.append(attributes_notebook)
                info_page = eview.xpath(
                    "//page[@string='%s']" % (translate_view('Information'),)
                )[0]
                info_page.addnext(main_page)
            result['arch'] = etree.tostring(eview, pretty_print=True)
        return result


    def product_id_change(self, cr, uid, ids, pricelist, product, qty=0,
            uom=False, qty_uos=0, uos=False, name='', partner_id=False,
            lang=False, update_tax=True, date_order=False, packaging=False, fiscal_position=False, flag=False,
            context=None):



                result= super(sale_order_line,self).product_id_change(cr, uid, ids, pricelist, product, qty,
                uom, qty_uos, uos, name, partner_id,lang, update_tax, date_order, packaging
                , fiscal_position, flag, context)

                if product:
                    print"result value",result
                    read_data={}

                    sales_price=0
                    attr_name_in_product=[]
                    attr_type_in_product=[]
                    try:
                        attribute_set_val=self.pool.get('product.product').browse(cr,uid,product).attribute_set_id.attribute_group_ids
                        for each in attribute_set_val:
                            for y in each.attribute_ids:
                #                attr_name_type_dict[str(y.attribute_type)] = str(y.name)
                                attr_name_in_product.append(y.name)
                                attr_type_in_product.append(y.attribute_type)

                        read_data=self.pool.get('product.product').read(cr,uid,[product],attr_name_in_product)
                        read_data = read_data[0]

                        print"read value got",read_data

                        for each in read_data:
                            if each in attr_name_in_product:
                                i = attr_name_in_product.index(each)
                                if attr_type_in_product[i] == 'select':
                                    print "select type attribute"
                                    print read_data[each]
                                    read_data[each] = read_data[each][0]
                                    sales_price_select=self.pool.get('attribute.option').browse(cr,uid,read_data[each]).sales_price

                                    sales_price += sales_price_select
                                    print read_data[each]

                                elif attr_type_in_product[i] == 'multiselect':
                                    print "multiselect type attribute"
                                    print read_data[each]
                                    for each_attr_id in read_data[each]:
                                        sales_price_multi= self.pool.get('attribute.option').browse(cr,uid,each_attr_id).sales_price

                                        sales_price += sales_price_multi
                                    read_data[each] = [(6,0,read_data[each])]

                                    print [(6,0,read_data[each])]

                                else:
                                    search_id=self.pool.get('attribute.attribute').search(cr,uid,[('model','=','product.product'),('name','=',each)])
                                    sales_price_other= self.pool.get('attribute.attribute').browse(cr,uid,search_id[0]).option_ids[0].sales_price

                                    sales_price += sales_price_other
                        price_unit_toatal=sales_price+self.pool.get('product.product').browse(cr,uid,product).list_price
                        print"final price=========",price_unit_toatal



                        result['value'].update({'price_unit':price_unit_toatal})

                        return result
                    except:
                        _logger.warning('attribute set not mentioned')


                return result



    def copy_lines(self,cr,uid,ids,vals,context=None):


         sol_object=self.browse(cr,uid,ids)
         for each in sol_object:

            copy_line=self.copy(cr, uid,each.id,vals,context)
            print"==========",copy_line
            sal_id_val=self.browse(cr,uid,copy_line).order_id.id
            mod_obj = self.pool.get('ir.model.data')
            res = mod_obj.get_object_reference(cr, uid, 'sale', 'view_order_form')
            res_id = res and res[1] or False


         return{
                'view_type': 'form',
                'view_mode': 'form',
                'res_model': 'sale.order',
                'view_id': [res_id],
                'type': 'ir.actions.act_window',
                'nodestroy': True,
                'target': 'current',


                'res_id':sal_id_val


                }

sale_order_line()



class manufacture_info(osv.osv):
    _name="manufacture.info"
    _discription="manufacturer information"

    _columns={
    'name':fields.char('Manufacturer',size=20,required=True),


    }

manufacture_info()


class franchise_info(osv.osv):
    _name="franchise.info"
    _description="franchise information"

    _columns={

    'name':fields.char('Franchise',size=20,required=True),
    'manufacture_id':fields.many2one('manufacture.info','Manufacture'),
    }
franchise_info()


class campaign_theme(osv.osv):
    _name="campaign.theme"
    _description="sale campaign"
    _columns={

    'name':fields.char('Name',size=128,required=True),
    'active':fields.boolean('Active'),

    }

    _defaults = {
                'active':True
                }
campaign_theme()


class guarantee_type(osv.osv):
    _name="guarantee.type"
    _description="guarantee type information"
    _columns={

    'name':fields.char('Name',size=128,required=True),
    'verbiage':fields.text('Guarantee Verbiage',size=1024),

    }


guarantee_type()


class coop_info(osv.osv):
    _name="coop.info"
    _description="coop type information"
    _columns={

    'name':fields.char('Name',size=128,required=True),


    }


coop_info()



